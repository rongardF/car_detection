"""initial DB structure

Revision ID: 454c6b16dae5
Revises: 
Create Date: 2025-10-04 08:48:29.304310

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '454c6b16dae5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('organization_name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('jwt_token',
    sa.Column('account_uuid', sa.Uuid(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('object_analysis_config',
    sa.Column('account_uuid', sa.Uuid(), nullable=False),
    sa.Column('resolution_width', sa.Integer(), nullable=False),
    sa.Column('resolution_height', sa.Integer(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('api_key',
    sa.Column('account_id', sa.Uuid(), nullable=False),
    sa.Column('key', sa.LargeBinary(), nullable=False),
    sa.Column('hashed_key', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('frame_mask',
    sa.Column('pixel_width', sa.Integer(), nullable=False),
    sa.Column('pixel_height', sa.Integer(), nullable=False),
    sa.Column('object_analysis_config_uuid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['object_analysis_config_uuid'], ['object_analysis_config.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    op.create_table('object',
    sa.Column('value', sa.Enum('CAR', 'MOTORBIKE', 'BICYCLE', 'BUS', 'TRUCK', name='objectenum'), nullable=False),
    sa.Column('object_analysis_config_uuid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['object_analysis_config_uuid'], ['object_analysis_config.uuid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid'),
    sa.UniqueConstraint('uuid')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    raise NotImplementedError("Downgrades are not allowed")
